
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instruccion;
import expresiones.Aritmeticas;
import expresiones.Logicas;
import expresiones.Nativo;
import expresiones.Relacionales;
import expresiones.operadoresAritmeticos;
import expresiones.OperadoresLogicos;
import expresiones.OperadoresRelacionales;
import expresiones.Casteo;
import expresiones.AccesoVariable;
import instrucciones.Print;
import instrucciones.DeclaracionVariable;
import instrucciones.AsignacionVariable;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.Caso;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.DeclaracionVector;
import excepciones.Errores;
import expresiones.vectores.AccesoVector;
import instrucciones.AsignacionVector;
import instrucciones.DeclaracionLista;
import instrucciones.listas.Append;
import expresiones.fnativas.Remove;
import instrucciones.Funcion;
import instrucciones.Start;
import instrucciones.Llamada;
import instrucciones.Return;
import instrucciones.structs.Struct;
import instrucciones.structs.Instanciacion;
import expresiones.AccesoStruct;
import instrucciones.structs.Asignacion;
import expresiones.fnativas.Round;
import expresiones.fnativas.Length;
import expresiones.fnativas.ToString;
import expresiones.fnativas.Find;
import simbolo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\005\007\000\002\006" +
    "\004\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\005\000\002\006\005\000\002\006\006\000\002\006" +
    "\006\000\002\006\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\007\011\000\002\007\007\000\002\007\011" +
    "\000\002\007\007\000\002\010\006\000\002\011\005\000" +
    "\002\011\005\000\002\011\006\000\002\011\006\000\002" +
    "\012\011\000\002\012\015\000\002\012\013\000\002\017" +
    "\010\000\002\017\007\000\002\017\007\000\002\016\004" +
    "\000\002\016\003\000\002\014\010\000\002\015\010\000" +
    "\002\020\014\000\002\021\003\000\002\021\003\000\002" +
    "\022\011\000\002\023\013\000\002\024\004\000\002\025" +
    "\004\000\002\026\015\000\002\026\015\000\002\026\017" +
    "\000\002\026\017\000\002\026\013\000\002\026\013\000" +
    "\002\026\015\000\002\026\015\000\002\026\013\000\002" +
    "\026\013\000\002\026\015\000\002\026\015\000\002\030" +
    "\005\000\002\030\005\000\002\030\003\000\002\030\003" +
    "\000\002\031\005\000\002\027\006\000\002\027\011\000" +
    "\002\032\014\000\002\032\011\000\002\033\015\000\002" +
    "\033\011\000\002\034\011\000\002\035\010\000\002\036" +
    "\012\000\002\036\011\000\002\037\006\000\002\037\004" +
    "\000\002\040\010\000\002\040\007\000\002\042\006\000" +
    "\002\042\005\000\002\041\005\000\002\041\003\000\002" +
    "\043\005\000\002\043\004\000\002\044\010\000\002\050" +
    "\007\000\002\050\007\000\002\050\006\000\002\050\006" +
    "\000\002\045\013\000\002\045\013\000\002\051\007\000" +
    "\002\051\007\000\002\051\011\000\002\051\007\000\002" +
    "\051\005\000\002\051\005\000\002\046\005\000\002\046" +
    "\007\000\002\047\010\000\002\047\012\000\002\052\006" +
    "\000\002\053\006\000\002\054\006\000\002\055\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\056\003\040\032\043\033\046\034\063\035" +
    "\041\036\010\041\020\042\013\043\053\045\027\046\062" +
    "\047\061\050\034\051\012\052\015\053\037\054\031\100" +
    "\051\104\045\105\056\106\044\107\036\001\002\000\062" +
    "\002\ufff2\003\ufff2\021\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\100" +
    "\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\001\002\000\062" +
    "\002\ufffc\003\ufffc\021\ufffc\032\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\041\ufffc\042\ufffc\043\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\100" +
    "\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\001\002\000\062" +
    "\002\uffea\003\uffea\021\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\100" +
    "\uffea\104\uffea\105\uffea\106\uffea\107\uffea\001\002\000\062" +
    "\002\ufff9\003\ufff9\021\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\041\ufff9\042\ufff9\043\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\100" +
    "\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\001\002\000\016" +
    "\011\uffc0\012\uffc0\017\uffc0\022\uffc0\025\uffc0\054\uffc0\001" +
    "\002\000\062\002\ufff8\003\ufff8\021\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\041\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\100\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\001" +
    "\002\000\004\022\u0194\001\002\000\004\054\u0177\001\002" +
    "\000\004\054\u0167\001\002\000\004\022\u0166\001\002\000" +
    "\062\002\ufff1\003\ufff1\021\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\041\ufff1\042\ufff1\043\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1" +
    "\100\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\001\002\000" +
    "\062\002\ufffb\003\ufffb\021\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\041\ufffb\042\ufffb\043\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\100\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\001\002\000" +
    "\004\054\u0120\001\002\000\062\002\ufffe\003\ufffe\021\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\100\ufffe\104\ufffe\105\ufffe\106" +
    "\ufffe\107\ufffe\001\002\000\062\002\ufffa\003\ufffa\021\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\100\ufffa\104\ufffa\105\ufffa\106" +
    "\ufffa\107\ufffa\001\002\000\062\002\ufffd\003\ufffd\021\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\100\ufffd\104\ufffd\105\ufffd\106" +
    "\ufffd\107\ufffd\001\002\000\062\002\uffed\003\uffed\021\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\041\uffed\042" +
    "\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\100\uffed\104\uffed\105\uffed\106" +
    "\uffed\107\uffed\001\002\000\062\002\ufff0\003\ufff0\021\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\100\ufff0\104\ufff0\105\ufff0\106" +
    "\ufff0\107\ufff0\001\002\000\060\002\000\003\040\032\043" +
    "\033\046\034\063\035\041\036\010\041\020\042\013\043" +
    "\053\045\027\046\062\047\061\050\034\051\012\052\015" +
    "\053\037\054\031\100\051\104\045\105\056\106\044\107" +
    "\036\001\002\000\034\004\066\016\073\027\072\037\074" +
    "\040\100\054\105\055\071\056\107\057\070\074\076\110" +
    "\077\111\102\112\075\001\002\000\062\002\ufff3\003\ufff3" +
    "\021\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\100\ufff3\104\ufff3\105" +
    "\ufff3\106\ufff3\107\ufff3\001\002\000\016\004\252\005\251" +
    "\011\234\016\162\025\357\101\360\001\002\000\062\002" +
    "\uffe8\003\uffe8\021\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\041\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\100\uffe8" +
    "\104\uffe8\105\uffe8\106\uffe8\107\uffe8\001\002\000\062\002" +
    "\uffe9\003\uffe9\021\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\100\uffe9" +
    "\104\uffe9\105\uffe9\106\uffe9\107\uffe9\001\002\000\004\020" +
    "\347\001\002\000\062\002\uffee\003\uffee\021\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\041\uffee\042\uffee\043" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\100\uffee\104\uffee\105\uffee\106\uffee\107" +
    "\uffee\001\002\000\036\004\066\016\073\022\344\027\072" +
    "\037\074\040\100\054\105\055\071\056\107\057\070\074" +
    "\076\110\077\111\102\112\075\001\002\000\004\016\340" +
    "\001\002\000\004\022\337\001\002\000\016\011\uffbf\012" +
    "\uffbf\017\uffbf\022\uffbf\025\uffbf\054\uffbf\001\002\000\062" +
    "\002\uffef\003\uffef\021\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\100" +
    "\uffef\104\uffef\105\uffef\106\uffef\107\uffef\001\002\000\016" +
    "\011\uffc2\012\uffc2\017\uffc2\022\uffc2\025\uffc2\054\uffc2\001" +
    "\002\000\004\054\330\001\002\000\016\011\uffbe\012\uffbe" +
    "\017\uffbe\022\uffbe\025\uffbe\054\uffbe\001\002\000\016\011" +
    "\uffc3\012\uffc3\017\uffc3\022\uffc3\025\uffc3\054\uffc3\001\002" +
    "\000\062\002\ufff6\003\ufff6\021\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\041\ufff6\042\ufff6\043\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\100\ufff6\104\ufff6\105\ufff6\106\ufff6\107\ufff6\001\002" +
    "\000\062\002\ufff4\003\ufff4\021\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\041\ufff4\042\ufff4\043\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\100\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\001\002" +
    "\000\004\013\315\001\002\000\004\022\314\001\002\000" +
    "\004\016\301\001\002\000\004\002\300\001\002\000\062" +
    "\002\ufff5\003\ufff5\021\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\100" +
    "\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\001\002\000\004" +
    "\020\257\001\002\000\062\002\ufff7\003\ufff7\021\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\100\ufff7\104\ufff7\105\ufff7\106\ufff7" +
    "\107\ufff7\001\002\000\062\002\uffeb\003\uffeb\021\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\100\uffeb\104\uffeb\105\uffeb\106\uffeb" +
    "\107\uffeb\001\002\000\004\016\231\001\002\000\004\016" +
    "\064\001\002\000\016\011\uffc1\012\uffc1\017\uffc1\022\uffc1" +
    "\025\uffc1\054\uffc1\001\002\000\034\004\066\016\073\027" +
    "\072\037\074\040\100\054\105\055\071\056\107\057\070" +
    "\074\076\110\077\111\102\112\075\001\002\000\046\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\001\002\000\034" +
    "\004\066\016\073\027\072\037\074\040\100\054\105\055" +
    "\071\056\107\057\070\074\076\110\077\111\102\112\075" +
    "\001\002\000\046\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\001\002\000\046\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\001\002\000\046\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\024\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\001\002\000\034\004\066\016\073\027\072" +
    "\037\074\040\100\054\105\055\071\056\107\057\070\074" +
    "\076\110\077\111\102\112\075\001\002\000\050\004\066" +
    "\016\073\027\072\032\043\033\046\034\063\035\041\036" +
    "\010\037\074\040\100\054\105\055\071\056\107\057\070" +
    "\074\076\104\045\110\077\111\102\112\075\001\002\000" +
    "\046\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\001\002" +
    "\000\004\016\217\001\002\000\046\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\001\002\000\004\016\214\001\002" +
    "\000\046\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\001" +
    "\002\000\046\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\001\002\000\004\016\211\001\002\000\046\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\001\002\000\046\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\001\002\000\054\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\016\162\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\024\uffd3\025\161\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\101\160\001\002\000\046\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\024\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\001\002\000\046\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\001\002\000\046\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\001\002\000\046\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\001\002\000\034\004\116\005" +
    "\122\006\120\007\121\010\125\011\124\012\123\013\117" +
    "\014\115\017\114\027\126\030\113\031\127\001\002\000" +
    "\034\004\066\016\073\027\072\037\074\040\100\054\105" +
    "\055\071\056\107\057\070\074\076\110\077\111\102\112" +
    "\075\001\002\000\004\020\153\001\002\000\034\004\066" +
    "\016\073\027\072\037\074\040\100\054\105\055\071\056" +
    "\107\057\070\074\076\110\077\111\102\112\075\001\002" +
    "\000\034\004\066\016\073\027\072\037\074\040\100\054" +
    "\105\055\071\056\107\057\070\074\076\110\077\111\102" +
    "\112\075\001\002\000\036\004\066\011\146\016\073\027" +
    "\072\037\074\040\100\054\105\055\071\056\107\057\070" +
    "\074\076\110\077\111\102\112\075\001\002\000\036\004" +
    "\066\006\143\016\073\027\072\037\074\040\100\054\105" +
    "\055\071\056\107\057\070\074\076\110\077\111\102\112" +
    "\075\001\002\000\034\004\066\016\073\027\072\037\074" +
    "\040\100\054\105\055\071\056\107\057\070\074\076\110" +
    "\077\111\102\112\075\001\002\000\034\004\066\016\073" +
    "\027\072\037\074\040\100\054\105\055\071\056\107\057" +
    "\070\074\076\110\077\111\102\112\075\001\002\000\036" +
    "\004\066\011\136\016\073\027\072\037\074\040\100\054" +
    "\105\055\071\056\107\057\070\074\076\110\077\111\102" +
    "\112\075\001\002\000\004\011\134\001\002\000\034\004" +
    "\066\016\073\027\072\037\074\040\100\054\105\055\071" +
    "\056\107\057\070\074\076\110\077\111\102\112\075\001" +
    "\002\000\004\011\131\001\002\000\034\004\066\016\073" +
    "\027\072\037\074\040\100\054\105\055\071\056\107\057" +
    "\070\074\076\110\077\111\102\112\075\001\002\000\046" +
    "\004\uffd5\005\uffd5\006\120\007\121\010\125\011\uffd5\012" +
    "\uffd5\013\uffd5\014\115\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\024\uffd5\026\uffd5\027\uffd5\030\113\031\uffd5\001\002\000" +
    "\034\004\066\016\073\027\072\037\074\040\100\054\105" +
    "\055\071\056\107\057\070\074\076\110\077\111\102\112" +
    "\075\001\002\000\046\004\uffdc\005\uffdc\006\120\007\121" +
    "\010\125\011\uffdc\012\uffdc\013\uffdc\014\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\001\002\000\046\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\024\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\001\002\000\034\004\066\016\073\027\072" +
    "\037\074\040\100\054\105\055\071\056\107\057\070\074" +
    "\076\110\077\111\102\112\075\001\002\000\046\004\uffdd" +
    "\005\uffdd\006\120\007\121\010\125\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\001\002\000\034\004" +
    "\066\016\073\027\072\037\074\040\100\054\105\055\071" +
    "\056\107\057\070\074\076\110\077\111\102\112\075\001" +
    "\002\000\046\004\uffda\005\uffda\006\120\007\121\010\125" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\001\002\000\046\004\uffd8\005\uffd8\006\120\007\121\010" +
    "\125\011\uffd8\012\uffd8\013\uffd8\014\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\001\002\000\046\004\uffe4\005\uffe4\006\120\007\121" +
    "\010\125\011\uffe4\012\uffe4\013\uffe4\014\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\001\002\000\046\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\024\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\001\002\000\034\004\066\016\073\027\072" +
    "\037\074\040\100\054\105\055\071\056\107\057\070\074" +
    "\076\110\077\111\102\112\075\001\002\000\046\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\001\002\000\046\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002\000\034" +
    "\004\066\016\073\027\072\037\074\040\100\054\105\055" +
    "\071\056\107\057\070\074\076\110\077\111\102\112\075" +
    "\001\002\000\046\004\uffdb\005\uffdb\006\120\007\121\010" +
    "\125\011\uffdb\012\uffdb\013\uffdb\014\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\001\002\000\046\004\uffd9\005\uffd9\006\120\007\121" +
    "\010\125\011\uffd9\012\uffd9\013\uffd9\014\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\001\002\000\046\004\uffe3\005\uffe3\006\120\007" +
    "\121\010\125\011\uffe3\012\uffe3\013\uffe3\014\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\024\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\001\002\000\046\004\uffd4\005\uffd4\006\120" +
    "\007\121\010\125\011\uffd4\012\uffd4\013\uffd4\014\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\001\002\000\056\003\040\032\043\033" +
    "\046\034\063\035\041\036\010\041\020\042\013\043\053" +
    "\045\027\046\062\047\061\050\034\051\012\052\015\053" +
    "\037\054\031\100\051\104\045\105\056\106\044\107\036" +
    "\001\002\000\060\003\040\021\155\032\043\033\046\034" +
    "\063\035\041\036\010\041\020\042\013\043\053\045\027" +
    "\046\062\047\061\050\034\051\012\052\015\053\037\054" +
    "\031\100\051\104\045\105\056\106\044\107\036\001\002" +
    "\000\062\002\uffa7\003\uffa7\021\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\041\uffa7\042\uffa7\043\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\100\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\001\002" +
    "\000\062\002\uffff\003\uffff\021\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\041\uffff\042\uffff\043\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\100\uffff\104\uffff\105\uffff\106\uffff\107\uffff\001\002" +
    "\000\046\004\uffd6\005\uffd6\006\120\007\121\010\125\011" +
    "\uffd6\012\uffd6\013\uffd6\014\115\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\001" +
    "\002\000\010\054\177\103\200\113\176\001\002\000\034" +
    "\004\066\016\073\027\072\037\074\040\100\054\105\055" +
    "\071\056\107\057\070\074\076\110\077\111\102\112\075" +
    "\001\002\000\036\004\066\016\073\017\163\027\072\037" +
    "\074\040\100\054\105\055\071\056\107\057\070\074\076" +
    "\110\077\111\102\112\075\001\002\000\046\004\uff83\005" +
    "\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83" +
    "\014\uff83\017\uff83\020\uff83\021\uff83\022\uff83\024\uff83\026" +
    "\uff83\027\uff83\030\uff83\031\uff83\001\002\000\006\017\167" +
    "\024\166\001\002\000\036\004\116\005\122\006\120\007" +
    "\121\010\125\011\124\012\123\013\117\014\115\017\uff81" +
    "\024\uff81\027\126\030\113\031\127\001\002\000\034\004" +
    "\066\016\073\027\072\037\074\040\100\054\105\055\071" +
    "\056\107\057\070\074\076\110\077\111\102\112\075\001" +
    "\002\000\046\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\017\uff84\020\uff84\021" +
    "\uff84\022\uff84\024\uff84\026\uff84\027\uff84\030\uff84\031\uff84" +
    "\001\002\000\036\004\116\005\122\006\120\007\121\010" +
    "\125\011\124\012\123\013\117\014\115\017\uff82\024\uff82" +
    "\027\126\030\113\031\127\001\002\000\034\004\116\005" +
    "\122\006\120\007\121\010\125\011\124\012\123\013\117" +
    "\014\115\026\172\027\126\030\113\031\127\001\002\000" +
    "\050\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\024\uff92\025\173\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\001\002\000\034\004\066\016\073\027\072\037\074\040" +
    "\100\054\105\055\071\056\107\057\070\074\076\110\077" +
    "\111\102\112\075\001\002\000\034\004\116\005\122\006" +
    "\120\007\121\010\125\011\124\012\123\013\117\014\115" +
    "\026\175\027\126\030\113\031\127\001\002\000\046\004" +
    "\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\014\uff91\017\uff91\020\uff91\021\uff91\022\uff91\024" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\001\002\000\004" +
    "\016\206\001\002\000\050\004\uff71\005\uff71\006\uff71\007" +
    "\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71\017\uff71" +
    "\020\uff71\021\uff71\022\uff71\024\uff71\026\uff71\027\uff71\030" +
    "\uff71\031\uff71\101\204\001\002\000\004\016\201\001\002" +
    "\000\034\004\066\016\073\027\072\037\074\040\100\054" +
    "\105\055\071\056\107\057\070\074\076\110\077\111\102" +
    "\112\075\001\002\000\034\004\116\005\122\006\120\007" +
    "\121\010\125\011\124\012\123\013\117\014\115\017\203" +
    "\027\126\030\113\031\127\001\002\000\046\004\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024\uff8b\026" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\001\002\000\004\054\205" +
    "\001\002\000\046\004\uff70\005\uff70\006\uff70\007\uff70\010" +
    "\uff70\011\uff70\012\uff70\013\uff70\014\uff70\017\uff70\020\uff70" +
    "\021\uff70\022\uff70\024\uff70\026\uff70\027\uff70\030\uff70\031" +
    "\uff70\001\002\000\034\004\066\016\073\027\072\037\074" +
    "\040\100\054\105\055\071\056\107\057\070\074\076\110" +
    "\077\111\102\112\075\001\002\000\034\004\116\005\122" +
    "\006\120\007\121\010\125\011\124\012\123\013\117\014" +
    "\115\017\210\027\126\030\113\031\127\001\002\000\046" +
    "\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a" +
    "\024\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\001\002\000" +
    "\034\004\066\016\073\027\072\037\074\040\100\054\105" +
    "\055\071\056\107\057\070\074\076\110\077\111\102\112" +
    "\075\001\002\000\034\004\116\005\122\006\120\007\121" +
    "\010\125\011\124\012\123\013\117\014\115\017\213\027" +
    "\126\030\113\031\127\001\002\000\046\004\uff6c\005\uff6c" +
    "\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014" +
    "\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\024\uff6c\026\uff6c" +
    "\027\uff6c\030\uff6c\031\uff6c\001\002\000\034\004\066\016" +
    "\073\027\072\037\074\040\100\054\105\055\071\056\107" +
    "\057\070\074\076\110\077\111\102\112\075\001\002\000" +
    "\034\004\116\005\122\006\120\007\121\010\125\011\124" +
    "\012\123\013\117\014\115\017\216\027\126\030\113\031" +
    "\127\001\002\000\046\004\uff6d\005\uff6d\006\uff6d\007\uff6d" +
    "\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d\017\uff6d\020" +
    "\uff6d\021\uff6d\022\uff6d\024\uff6d\026\uff6d\027\uff6d\030\uff6d" +
    "\031\uff6d\001\002\000\034\004\066\016\073\027\072\037" +
    "\074\040\100\054\105\055\071\056\107\057\070\074\076" +
    "\110\077\111\102\112\075\001\002\000\034\004\116\005" +
    "\122\006\120\007\121\010\125\011\124\012\123\013\117" +
    "\014\115\017\221\027\126\030\113\031\127\001\002\000" +
    "\046\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\024\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\001\002" +
    "\000\004\017\225\001\002\000\034\004\116\005\122\006" +
    "\120\007\121\010\125\011\124\012\123\013\117\014\115" +
    "\017\224\027\126\030\113\031\127\001\002\000\046\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\001\002\000\034" +
    "\004\066\016\073\027\072\037\074\040\100\054\105\055" +
    "\071\056\107\057\070\074\076\110\077\111\102\112\075" +
    "\001\002\000\046\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\001\002\000\046\004\uffd7\005\uffd7\006\120\007\121" +
    "\010\125\011\uffd7\012\uffd7\013\uffd7\014\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\001\002\000\046\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\001\002\000\004\054\233\001\002\000\034" +
    "\004\066\016\073\027\072\037\074\040\100\054\105\055" +
    "\071\056\107\057\070\074\076\110\077\111\102\112\075" +
    "\001\002\000\004\011\234\001\002\000\034\004\066\016" +
    "\073\027\072\037\074\040\100\054\105\055\071\056\107" +
    "\057\070\074\076\110\077\111\102\112\075\001\002\000" +
    "\034\004\116\005\122\006\120\007\121\010\125\011\124" +
    "\012\123\013\117\014\115\022\236\027\126\030\113\031" +
    "\127\001\002\000\114\002\uffb9\003\uffb9\004\uffb9\016\uffb9" +
    "\017\uffb9\021\uffb9\027\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\074\uffb9\100\uffb9" +
    "\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112" +
    "\uffb9\001\002\000\034\004\116\005\122\006\120\007\121" +
    "\010\125\011\124\012\123\013\117\014\115\022\240\027" +
    "\126\030\113\031\127\001\002\000\004\054\243\001\002" +
    "\000\004\017\uffa8\001\002\000\004\017\uffa9\001\002\000" +
    "\010\004\252\005\251\011\234\001\002\000\004\017\245" +
    "\001\002\000\004\020\246\001\002\000\056\003\040\032" +
    "\043\033\046\034\063\035\041\036\010\041\020\042\013" +
    "\043\053\045\027\046\062\047\061\050\034\051\012\052" +
    "\015\053\037\054\031\100\051\104\045\105\056\106\044" +
    "\107\036\001\002\000\060\003\040\021\250\032\043\033" +
    "\046\034\063\035\041\036\010\041\020\042\013\043\053" +
    "\045\027\046\062\047\061\050\034\051\012\052\015\053" +
    "\037\054\031\100\051\104\045\105\056\106\044\107\036" +
    "\001\002\000\062\002\uffaa\003\uffaa\021\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\100\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa" +
    "\001\002\000\004\005\255\001\002\000\004\004\253\001" +
    "\002\000\066\002\uffb7\003\uffb7\017\uffb7\021\uffb7\022\254" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\100\uffb7\104\uffb7\105\uffb7\106" +
    "\uffb7\107\uffb7\001\002\000\064\002\uffb5\003\uffb5\017\uffb5" +
    "\021\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\100\uffb5\104\uffb5\105" +
    "\uffb5\106\uffb5\107\uffb5\001\002\000\066\002\uffb8\003\uffb8" +
    "\017\uffb8\021\uffb8\022\256\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\100" +
    "\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\001\002\000\064" +
    "\002\uffb6\003\uffb6\017\uffb6\021\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\043\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\100\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\001\002" +
    "\000\004\054\261\001\002\000\006\021\270\054\267\001" +
    "\002\000\004\023\262\001\002\000\020\032\043\033\046" +
    "\034\063\035\041\036\010\054\263\104\045\001\002\000" +
    "\004\022\266\001\002\000\004\022\265\001\002\000\006" +
    "\021\uff7a\054\uff7a\001\002\000\006\021\uff7b\054\uff7b\001" +
    "\002\000\004\023\273\001\002\000\004\054\271\001\002" +
    "\000\004\022\272\001\002\000\062\002\uff7e\003\uff7e\021" +
    "\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\054\uff7e\100\uff7e\104\uff7e\105\uff7e" +
    "\106\uff7e\107\uff7e\001\002\000\020\032\043\033\046\034" +
    "\063\035\041\036\010\054\274\104\045\001\002\000\004" +
    "\022\277\001\002\000\004\022\276\001\002\000\006\021" +
    "\uff7d\054\uff7d\001\002\000\006\021\uff7c\054\uff7c\001\002" +
    "\000\004\002\001\001\002\000\034\004\066\016\073\027" +
    "\072\037\074\040\100\054\105\055\071\056\107\057\070" +
    "\074\076\110\077\111\102\112\075\001\002\000\034\004" +
    "\116\005\122\006\120\007\121\010\125\011\124\012\123" +
    "\013\117\014\115\017\303\027\126\030\113\031\127\001" +
    "\002\000\004\020\304\001\002\000\056\003\040\032\043" +
    "\033\046\034\063\035\041\036\010\041\020\042\013\043" +
    "\053\045\027\046\062\047\061\050\034\051\012\052\015" +
    "\053\037\054\031\100\051\104\045\105\056\106\044\107" +
    "\036\001\002\000\060\003\040\021\306\032\043\033\046" +
    "\034\063\035\041\036\010\041\020\042\013\043\053\045" +
    "\027\046\062\047\061\050\034\051\012\052\015\053\037" +
    "\054\031\100\051\104\045\105\056\106\044\107\036\001" +
    "\002\000\064\002\uffb4\003\uffb4\021\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\307\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\100\uffb4\104\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\001\002\000\006\020\311\043\053\001\002\000\062" +
    "\002\uffb2\003\uffb2\021\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\100" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\001\002\000\056" +
    "\003\040\032\043\033\046\034\063\035\041\036\010\041" +
    "\020\042\013\043\053\045\027\046\062\047\061\050\034" +
    "\051\012\052\015\053\037\054\031\100\051\104\045\105" +
    "\056\106\044\107\036\001\002\000\060\003\040\021\313" +
    "\032\043\033\046\034\063\035\041\036\010\041\020\042" +
    "\013\043\053\045\027\046\062\047\061\050\034\051\012" +
    "\052\015\053\037\054\031\100\051\104\045\105\056\106" +
    "\044\107\036\001\002\000\062\002\uffb3\003\uffb3\021\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\100\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\001\002\000\062\002\uffec\003\uffec\021\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\041\uffec\042" +
    "\uffec\043\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\100\uffec\104\uffec\105\uffec\106" +
    "\uffec\107\uffec\001\002\000\016\032\043\033\046\034\063" +
    "\035\041\036\010\104\045\001\002\000\004\012\317\001" +
    "\002\000\004\054\320\001\002\000\004\011\321\001\002" +
    "\000\006\054\323\077\322\001\002\000\004\100\324\001" +
    "\002\000\062\002\uff8d\003\uff8d\021\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\041\uff8d\042\uff8d\043\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\100\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\001" +
    "\002\000\004\016\325\001\002\000\004\017\326\001\002" +
    "\000\004\022\327\001\002\000\062\002\uff8e\003\uff8e\021" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\100\uff8e\104\uff8e\105\uff8e" +
    "\106\uff8e\107\uff8e\001\002\000\004\016\331\001\002\000" +
    "\036\004\066\016\073\017\332\027\072\037\074\040\100" +
    "\054\105\055\071\056\107\057\070\074\076\110\077\111" +
    "\102\112\075\001\002\000\004\022\336\001\002\000\006" +
    "\017\334\024\166\001\002\000\004\022\335\001\002\000" +
    "\062\002\uff86\003\uff86\021\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\041\uff86\042\uff86\043\uff86\045\uff86\046" +
    "\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86" +
    "\100\uff86\104\uff86\105\uff86\106\uff86\107\uff86\001\002\000" +
    "\062\002\uff85\003\uff85\021\uff85\032\uff85\033\uff85\034\uff85" +
    "\035\uff85\036\uff85\041\uff85\042\uff85\043\uff85\045\uff85\046" +
    "\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85" +
    "\100\uff85\104\uff85\105\uff85\106\uff85\107\uff85\001\002\000" +
    "\062\002\uffe7\003\uffe7\021\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\041\uffe7\042\uffe7\043\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\100\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\001\002\000" +
    "\034\004\066\016\073\027\072\037\074\040\100\054\105" +
    "\055\071\056\107\057\070\074\076\110\077\111\102\112" +
    "\075\001\002\000\034\004\116\005\122\006\120\007\121" +
    "\010\125\011\124\012\123\013\117\014\115\017\342\027" +
    "\126\030\113\031\127\001\002\000\004\022\343\001\002" +
    "\000\062\002\uffe6\003\uffe6\021\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\100\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\001\002" +
    "\000\062\002\uff7f\003\uff7f\021\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\041\uff7f\042\uff7f\043\uff7f\045\uff7f" +
    "\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\100\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\001\002" +
    "\000\034\004\116\005\122\006\120\007\121\010\125\011" +
    "\124\012\123\013\117\014\115\022\346\027\126\030\113" +
    "\031\127\001\002\000\062\002\uff80\003\uff80\021\uff80\032" +
    "\uff80\033\uff80\034\uff80\035\uff80\036\uff80\041\uff80\042\uff80" +
    "\043\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052" +
    "\uff80\053\uff80\054\uff80\100\uff80\104\uff80\105\uff80\106\uff80" +
    "\107\uff80\001\002\000\056\003\040\032\043\033\046\034" +
    "\063\035\041\036\010\041\020\042\013\043\053\045\027" +
    "\046\062\047\061\050\034\051\012\052\015\053\037\054" +
    "\031\100\051\104\045\105\056\106\044\107\036\001\002" +
    "\000\060\003\040\021\351\032\043\033\046\034\063\035" +
    "\041\036\010\041\020\042\013\043\053\045\027\046\062" +
    "\047\061\050\034\051\012\052\015\053\037\054\031\100" +
    "\051\104\045\105\056\106\044\107\036\001\002\000\004" +
    "\046\352\001\002\000\004\016\353\001\002\000\034\004" +
    "\066\016\073\027\072\037\074\040\100\054\105\055\071" +
    "\056\107\057\070\074\076\110\077\111\102\112\075\001" +
    "\002\000\034\004\116\005\122\006\120\007\121\010\125" +
    "\011\124\012\123\013\117\014\115\017\355\027\126\030" +
    "\113\031\127\001\002\000\004\022\356\001\002\000\062" +
    "\002\uffa6\003\uffa6\021\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\041\uffa6\042\uffa6\043\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\100" +
    "\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\001\002\000\034" +
    "\004\066\016\073\027\072\037\074\040\100\054\105\055" +
    "\071\056\107\057\070\074\076\110\077\111\102\112\075" +
    "\001\002\000\006\054\361\102\362\001\002\000\006\011" +
    "\370\101\367\001\002\000\004\016\363\001\002\000\034" +
    "\004\066\016\073\027\072\037\074\040\100\054\105\055" +
    "\071\056\107\057\070\074\076\110\077\111\102\112\075" +
    "\001\002\000\034\004\116\005\122\006\120\007\121\010" +
    "\125\011\124\012\123\013\117\014\115\017\365\027\126" +
    "\030\113\031\127\001\002\000\004\022\366\001\002\000" +
    "\062\002\uff8c\003\uff8c\021\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\100\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\001\002\000" +
    "\004\054\373\001\002\000\034\004\066\016\073\027\072" +
    "\037\074\040\100\054\105\055\071\056\107\057\070\074" +
    "\076\110\077\111\102\112\075\001\002\000\034\004\116" +
    "\005\122\006\120\007\121\010\125\011\124\012\123\013" +
    "\117\014\115\022\372\027\126\030\113\031\127\001\002" +
    "\000\062\002\uff6f\003\uff6f\021\uff6f\032\uff6f\033\uff6f\034" +
    "\uff6f\035\uff6f\036\uff6f\041\uff6f\042\uff6f\043\uff6f\045\uff6f" +
    "\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054" +
    "\uff6f\100\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\001\002" +
    "\000\004\011\374\001\002\000\034\004\066\016\073\027" +
    "\072\037\074\040\100\054\105\055\071\056\107\057\070" +
    "\074\076\110\077\111\102\112\075\001\002\000\034\004" +
    "\116\005\122\006\120\007\121\010\125\011\124\012\123" +
    "\013\117\014\115\022\376\027\126\030\113\031\127\001" +
    "\002\000\062\002\uff6e\003\uff6e\021\uff6e\032\uff6e\033\uff6e" +
    "\034\uff6e\035\uff6e\036\uff6e\041\uff6e\042\uff6e\043\uff6e\045" +
    "\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\100\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\001" +
    "\002\000\034\004\116\005\122\006\120\007\121\010\125" +
    "\011\124\012\123\013\117\014\115\026\u0100\027\126\030" +
    "\113\031\127\001\002\000\006\011\u0102\025\u0101\001\002" +
    "\000\034\004\066\016\073\027\072\037\074\040\100\054" +
    "\105\055\071\056\107\057\070\074\076\110\077\111\102" +
    "\112\075\001\002\000\034\004\066\016\073\027\072\037" +
    "\074\040\100\054\105\055\071\056\107\057\070\074\076" +
    "\110\077\111\102\112\075\001\002\000\034\004\116\005" +
    "\122\006\120\007\121\010\125\011\124\012\123\013\117" +
    "\014\115\022\u0104\027\126\030\113\031\127\001\002\000" +
    "\062\002\uff8f\003\uff8f\021\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\041\uff8f\042\uff8f\043\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f" +
    "\100\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f\001\002\000" +
    "\034\004\116\005\122\006\120\007\121\010\125\011\124" +
    "\012\123\013\117\014\115\026\u0106\027\126\030\113\031" +
    "\127\001\002\000\004\011\u0107\001\002\000\034\004\066" +
    "\016\073\027\072\037\074\040\100\054\105\055\071\056" +
    "\107\057\070\074\076\110\077\111\102\112\075\001\002" +
    "\000\034\004\116\005\122\006\120\007\121\010\125\011" +
    "\124\012\123\013\117\014\115\022\u0109\027\126\030\113" +
    "\031\127\001\002\000\062\002\uff90\003\uff90\021\uff90\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\041\uff90\042\uff90" +
    "\043\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\100\uff90\104\uff90\105\uff90\106\uff90" +
    "\107\uff90\001\002\000\034\004\116\005\122\006\120\007" +
    "\121\010\125\011\124\012\123\013\117\014\115\020\u010b" +
    "\027\126\030\113\031\127\001\002\000\036\004\066\015" +
    "\u010e\016\073\027\072\037\074\040\100\054\105\055\071" +
    "\056\107\057\070\074\076\110\077\111\102\112\075\001" +
    "\002\000\040\004\066\015\u010e\016\073\021\u011e\027\072" +
    "\037\074\040\100\054\105\055\071\056\107\057\070\074" +
    "\076\110\077\111\102\112\075\001\002\000\004\021\u011b" +
    "\001\002\000\004\011\u0116\001\002\000\040\004\uffad\015" +
    "\uffad\016\uffad\021\uffad\027\uffad\037\uffad\040\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\074\uffad\110\uffad\111\uffad\112" +
    "\uffad\001\002\000\032\004\116\005\122\006\120\007\121" +
    "\010\125\011\u0111\012\123\013\117\014\115\027\126\030" +
    "\113\031\127\001\002\000\006\011\134\012\u0112\001\002" +
    "\000\004\020\u0113\001\002\000\056\003\040\032\043\033" +
    "\046\034\063\035\041\036\010\041\020\042\013\043\053" +
    "\045\027\046\062\047\061\050\034\051\012\052\015\053" +
    "\037\054\031\100\051\104\045\105\056\106\044\107\036" +
    "\001\002\000\060\003\040\021\u0115\032\043\033\046\034" +
    "\063\035\041\036\010\041\020\042\013\043\053\045\027" +
    "\046\062\047\061\050\034\051\012\052\015\053\037\054" +
    "\031\100\051\104\045\105\056\106\044\107\036\001\002" +
    "\000\040\004\uffac\015\uffac\016\uffac\021\uffac\027\uffac\037" +
    "\uffac\040\uffac\054\uffac\055\uffac\056\uffac\057\uffac\074\uffac" +
    "\110\uffac\111\uffac\112\uffac\001\002\000\004\012\u0117\001" +
    "\002\000\004\020\u0118\001\002\000\056\003\040\032\043" +
    "\033\046\034\063\035\041\036\010\041\020\042\013\043" +
    "\053\045\027\046\062\047\061\050\034\051\012\052\015" +
    "\053\037\054\031\100\051\104\045\105\056\106\044\107" +
    "\036\001\002\000\060\003\040\021\u011a\032\043\033\046" +
    "\034\063\035\041\036\010\041\020\042\013\043\053\045" +
    "\027\046\062\047\061\050\034\051\012\052\015\053\037" +
    "\054\031\100\051\104\045\105\056\106\044\107\036\001" +
    "\002\000\004\021\uffab\001\002\000\062\002\uffaf\003\uffaf" +
    "\021\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\100\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\107\uffaf\001\002\000\004\021\u011f\001\002" +
    "\000\040\004\uffae\015\uffae\016\uffae\021\uffae\027\uffae\037" +
    "\uffae\040\uffae\054\uffae\055\uffae\056\uffae\057\uffae\074\uffae" +
    "\110\uffae\111\uffae\112\uffae\001\002\000\062\002\uffb0\003" +
    "\uffb0\021\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\100\uffb0\104\uffb0" +
    "\105\uffb0\106\uffb0\107\uffb0\001\002\000\062\002\uffb1\003" +
    "\uffb1\021\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\100\uffb1\104\uffb1" +
    "\105\uffb1\106\uffb1\107\uffb1\001\002\000\004\023\u0121\001" +
    "\002\000\020\032\043\033\046\034\063\035\041\036\010" +
    "\054\u0122\104\045\001\002\000\004\011\u0146\001\002\000" +
    "\010\011\u0126\022\u0124\025\u0125\001\002\000\062\002\uffbc" +
    "\003\uffbc\021\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\100\uffbc\104" +
    "\uffbc\105\uffbc\106\uffbc\107\uffbc\001\002\000\004\026\u0129" +
    "\001\002\000\034\004\066\016\073\027\072\037\074\040" +
    "\100\054\105\055\071\056\107\057\070\074\076\110\077" +
    "\111\102\112\075\001\002\000\034\004\116\005\122\006" +
    "\120\007\121\010\125\011\124\012\123\013\117\014\115" +
    "\022\u0128\027\126\030\113\031\127\001\002\000\062\002" +
    "\uffbd\003\uffbd\021\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\100\uffbd" +
    "\104\uffbd\105\uffbd\106\uffbd\107\uffbd\001\002\000\006\011" +
    "\u012b\025\u012a\001\002\000\004\026\u013c\001\002\000\006" +
    "\025\u012c\054\u012d\001\002\000\036\004\066\016\073\025" +
    "\u0132\027\072\037\074\040\100\054\105\055\071\056\107" +
    "\057\070\074\076\110\077\111\102\112\075\001\002\000" +
    "\006\022\u0130\025\161\001\002\000\004\022\u012f\001\002" +
    "\000\062\002\uff9b\003\uff9b\021\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\041\uff9b\042\uff9b\043\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\100\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\001\002" +
    "\000\062\002\uff9f\003\uff9f\021\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\041\uff9f\042\uff9f\043\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\100\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\001\002" +
    "\000\006\024\u0137\026\u013a\001\002\000\036\004\066\016" +
    "\073\025\u0132\027\072\037\074\040\100\054\105\055\071" +
    "\056\107\057\070\074\076\110\077\111\102\112\075\001" +
    "\002\000\006\024\uff95\026\uff95\001\002\000\036\004\116" +
    "\005\122\006\120\007\121\010\125\011\124\012\123\013" +
    "\117\014\115\024\uff94\026\uff94\027\126\030\113\031\127" +
    "\001\002\000\006\024\u0137\026\u0136\001\002\000\006\024" +
    "\uff93\026\uff93\001\002\000\036\004\066\016\073\025\u0132" +
    "\027\072\037\074\040\100\054\105\055\071\056\107\057" +
    "\070\074\076\110\077\111\102\112\075\001\002\000\006" +
    "\024\uff96\026\uff96\001\002\000\036\004\116\005\122\006" +
    "\120\007\121\010\125\011\124\012\123\013\117\014\115" +
    "\024\uff97\026\uff97\027\126\030\113\031\127\001\002\000" +
    "\004\022\u013b\001\002\000\062\002\uffa3\003\uffa3\021\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\100\uffa3\104\uffa3\105\uffa3\106" +
    "\uffa3\107\uffa3\001\002\000\004\011\u013d\001\002\000\006" +
    "\025\u013e\054\u013f\001\002\000\036\004\066\016\073\025" +
    "\u0132\027\072\037\074\040\100\054\105\055\071\056\107" +
    "\057\070\074\076\110\077\111\102\112\075\001\002\000" +
    "\006\022\u0142\025\161\001\002\000\004\022\u0141\001\002" +
    "\000\062\002\uff99\003\uff99\021\uff99\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\041\uff99\042\uff99\043\uff99\045\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054" +
    "\uff99\100\uff99\104\uff99\105\uff99\106\uff99\107\uff99\001\002" +
    "\000\062\002\uff9d\003\uff9d\021\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\041\uff9d\042\uff9d\043\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\100\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\001\002" +
    "\000\006\024\u0137\026\u0144\001\002\000\004\022\u0145\001" +
    "\002\000\062\002\uffa1\003\uffa1\021\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\041\uffa1\042\uffa1\043\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\100\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\001" +
    "\002\000\004\020\u0147\001\002\000\004\054\u0148\001\002" +
    "\000\004\023\u0160\001\002\000\006\021\u014b\024\u014a\001" +
    "\002\000\004\054\u014d\001\002\000\004\022\u014c\001\002" +
    "\000\064\002\uff79\003\uff79\021\uff79\024\uff79\032\uff79\033" +
    "\uff79\034\uff79\035\uff79\036\uff79\041\uff79\042\uff79\043\uff79" +
    "\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053" +
    "\uff79\054\uff79\100\uff79\104\uff79\105\uff79\106\uff79\107\uff79" +
    "\001\002\000\004\023\u014e\001\002\000\042\004\066\016" +
    "\073\020\u0151\027\072\037\074\040\100\041\u0152\042\u0150" +
    "\054\105\055\071\056\107\057\070\074\076\110\077\111" +
    "\102\112\075\001\002\000\006\021\uff76\024\uff76\001\002" +
    "\000\004\054\u0158\001\002\000\004\054\u0148\001\002\000" +
    "\004\054\u0154\001\002\000\036\004\116\005\122\006\120" +
    "\007\121\010\125\011\124\012\123\013\117\014\115\021" +
    "\uff77\024\uff77\027\126\030\113\031\127\001\002\000\004" +
    "\023\u0155\001\002\000\004\054\u0122\001\002\000\006\021" +
    "\u0157\024\u014a\001\002\000\006\021\uff75\024\uff75\001\002" +
    "\000\004\023\u0159\001\002\000\004\054\u015a\001\002\000" +
    "\004\011\u015b\001\002\000\004\020\u015c\001\002\000\004" +
    "\054\u0148\001\002\000\006\021\u015e\024\u014a\001\002\000" +
    "\004\022\u015f\001\002\000\064\002\uff78\003\uff78\021\uff78" +
    "\024\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\041" +
    "\uff78\042\uff78\043\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\053\uff78\054\uff78\100\uff78\104\uff78\105" +
    "\uff78\106\uff78\107\uff78\001\002\000\042\004\066\016\073" +
    "\020\u0162\027\072\037\074\040\100\041\u0152\042\u0150\054" +
    "\105\055\071\056\107\057\070\074\076\110\077\111\102" +
    "\112\075\001\002\000\006\021\uff73\024\uff73\001\002\000" +
    "\004\054\u0148\001\002\000\036\004\116\005\122\006\120" +
    "\007\121\010\125\011\124\012\123\013\117\014\115\021" +
    "\uff72\024\uff72\027\126\030\113\031\127\001\002\000\006" +
    "\021\u0165\024\u014a\001\002\000\006\021\uff74\024\uff74\001" +
    "\002\000\062\002\uffa4\003\uffa4\021\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\041\uffa4\042\uffa4\043\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\100\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\001" +
    "\002\000\004\016\u0168\001\002\000\020\017\u0169\032\043" +
    "\033\046\034\063\035\041\036\010\104\045\001\002\000" +
    "\004\020\u0174\001\002\000\006\017\u016e\024\u016d\001\002" +
    "\000\004\054\u016c\001\002\000\006\017\uff87\024\uff87\001" +
    "\002\000\016\032\043\033\046\034\063\035\041\036\010" +
    "\104\045\001\002\000\004\020\u016f\001\002\000\056\003" +
    "\040\032\043\033\046\034\063\035\041\036\010\041\020" +
    "\042\013\043\053\045\027\046\062\047\061\050\034\051" +
    "\012\052\015\053\037\054\031\100\051\104\045\105\056" +
    "\106\044\107\036\001\002\000\060\003\040\021\u0171\032" +
    "\043\033\046\034\063\035\041\036\010\041\020\042\013" +
    "\043\053\045\027\046\062\047\061\050\034\051\012\052" +
    "\015\053\037\054\031\100\051\104\045\105\056\106\044" +
    "\107\036\001\002\000\062\002\uff8a\003\uff8a\021\uff8a\032" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\041\uff8a\042\uff8a" +
    "\043\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052" +
    "\uff8a\053\uff8a\054\uff8a\100\uff8a\104\uff8a\105\uff8a\106\uff8a" +
    "\107\uff8a\001\002\000\004\054\u0173\001\002\000\006\017" +
    "\uff88\024\uff88\001\002\000\056\003\040\032\043\033\046" +
    "\034\063\035\041\036\010\041\020\042\013\043\053\045" +
    "\027\046\062\047\061\050\034\051\012\052\015\053\037" +
    "\054\031\100\051\104\045\105\056\106\044\107\036\001" +
    "\002\000\060\003\040\021\u0176\032\043\033\046\034\063" +
    "\035\041\036\010\041\020\042\013\043\053\045\027\046" +
    "\062\047\061\050\034\051\012\052\015\053\037\054\031" +
    "\100\051\104\045\105\056\106\044\107\036\001\002\000" +
    "\062\002\uff89\003\uff89\021\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\036\uff89\041\uff89\042\uff89\043\uff89\045\uff89\046" +
    "\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89" +
    "\100\uff89\104\uff89\105\uff89\106\uff89\107\uff89\001\002\000" +
    "\004\023\u0178\001\002\000\020\032\043\033\046\034\063" +
    "\035\041\036\010\054\u015a\104\045\001\002\000\010\011" +
    "\u017c\022\u017a\025\u017b\001\002\000\062\002\uffba\003\uffba" +
    "\021\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\041" +
    "\uffba\042\uffba\043\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\100\uffba\104\uffba\105" +
    "\uffba\106\uffba\107\uffba\001\002\000\004\026\u017f\001\002" +
    "\000\034\004\066\016\073\027\072\037\074\040\100\054" +
    "\105\055\071\056\107\057\070\074\076\110\077\111\102" +
    "\112\075\001\002\000\034\004\116\005\122\006\120\007" +
    "\121\010\125\011\124\012\123\013\117\014\115\022\u017e" +
    "\027\126\030\113\031\127\001\002\000\062\002\uffbb\003" +
    "\uffbb\021\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\100\uffbb\104\uffbb" +
    "\105\uffbb\106\uffbb\107\uffbb\001\002\000\006\011\u0181\025" +
    "\u0180\001\002\000\004\026\u018a\001\002\000\006\025\u0182" +
    "\054\u0183\001\002\000\036\004\066\016\073\025\u0132\027" +
    "\072\037\074\040\100\054\105\055\071\056\107\057\070" +
    "\074\076\110\077\111\102\112\075\001\002\000\006\022" +
    "\u0186\025\161\001\002\000\004\022\u0185\001\002\000\062" +
    "\002\uff9a\003\uff9a\021\uff9a\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\100" +
    "\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\001\002\000\062" +
    "\002\uff9e\003\uff9e\021\uff9e\032\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\041\uff9e\042\uff9e\043\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\100" +
    "\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\001\002\000\006" +
    "\024\u0137\026\u0188\001\002\000\004\022\u0189\001\002\000" +
    "\062\002\uffa2\003\uffa2\021\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\041\uffa2\042\uffa2\043\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\100\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\001\002\000" +
    "\004\011\u018b\001\002\000\006\025\u018c\054\u018d\001\002" +
    "\000\036\004\066\016\073\025\u0132\027\072\037\074\040" +
    "\100\054\105\055\071\056\107\057\070\074\076\110\077" +
    "\111\102\112\075\001\002\000\006\022\u0190\025\161\001" +
    "\002\000\004\022\u018f\001\002\000\062\002\uff98\003\uff98" +
    "\021\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\041" +
    "\uff98\042\uff98\043\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\100\uff98\104\uff98\105" +
    "\uff98\106\uff98\107\uff98\001\002\000\062\002\uff9c\003\uff9c" +
    "\021\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\054\uff9c\100\uff9c\104\uff9c\105" +
    "\uff9c\106\uff9c\107\uff9c\001\002\000\006\024\u0137\026\u0192" +
    "\001\002\000\004\022\u0193\001\002\000\062\002\uffa0\003" +
    "\uffa0\021\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\100\uffa0\104\uffa0" +
    "\105\uffa0\106\uffa0\107\uffa0\001\002\000\062\002\uffa5\003" +
    "\uffa5\021\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\100\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\066\002\053\003\025\004\020\005\022\007" +
    "\004\010\016\011\021\012\006\013\013\017\010\020\056" +
    "\022\046\023\054\024\047\025\027\026\003\032\015\033" +
    "\024\034\041\036\034\040\023\042\051\043\031\044\057" +
    "\045\005\047\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\155\005\022\007\004\010\016\011\021\012" +
    "\006\013\013\017\010\020\056\022\046\023\054\024\047" +
    "\025\027\026\003\032\015\033\024\034\041\036\034\040" +
    "\023\042\051\043\031\044\057\045\005\047\032\001\001" +
    "\000\024\006\u0109\027\100\035\103\042\064\046\066\052" +
    "\105\053\107\054\110\055\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\344\027\100" +
    "\035\103\042\064\046\066\052\105\053\107\054\110\055" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\111" +
    "\027\100\035\103\042\064\046\066\052\105\053\107\054" +
    "\110\055\102\001\001\000\002\001\001\000\024\006\227" +
    "\027\100\035\103\042\064\046\066\052\105\053\107\054" +
    "\110\055\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\226\027\100\035\103\042" +
    "\064\046\066\052\105\053\107\054\110\055\102\001\001" +
    "\000\026\006\222\013\221\027\100\035\103\042\064\046" +
    "\066\052\105\053\107\054\110\055\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\156\027\100\035" +
    "\103\042\064\046\066\052\105\053\107\054\110\055\102" +
    "\001\001\000\002\001\001\000\024\006\151\027\100\035" +
    "\103\042\064\046\066\052\105\053\107\054\110\055\102" +
    "\001\001\000\024\006\150\027\100\035\103\042\064\046" +
    "\066\052\105\053\107\054\110\055\102\001\001\000\024" +
    "\006\146\027\100\035\103\042\064\046\066\052\105\053" +
    "\107\054\110\055\102\001\001\000\024\006\143\027\100" +
    "\035\103\042\064\046\066\052\105\053\107\054\110\055" +
    "\102\001\001\000\024\006\141\027\100\035\103\042\064" +
    "\046\066\052\105\053\107\054\110\055\102\001\001\000" +
    "\024\006\140\027\100\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\024\006\136\027" +
    "\100\035\103\042\064\046\066\052\105\053\107\054\110" +
    "\055\102\001\001\000\002\001\001\000\024\006\132\027" +
    "\100\035\103\042\064\046\066\052\105\053\107\054\110" +
    "\055\102\001\001\000\002\001\001\000\024\006\127\027" +
    "\100\035\103\042\064\046\066\052\105\053\107\054\110" +
    "\055\102\001\001\000\002\001\001\000\024\006\131\027" +
    "\100\035\103\042\064\046\066\052\105\053\107\054\110" +
    "\055\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\134\027\100\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\024\006\137\027\100\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\144\027\100\035\103\042\064\046\066\052\105\053" +
    "\107\054\110\055\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\147\027\100\035\103\042\064\046" +
    "\066\052\105\053\107\054\110\055\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\153\004\020\005\022\007\004\010\016" +
    "\011\021\012\006\013\013\017\010\020\056\022\046\023" +
    "\054\024\047\025\027\026\003\032\015\033\024\034\041" +
    "\036\034\040\023\042\051\043\031\044\057\045\005\047" +
    "\032\001\001\000\062\004\155\005\022\007\004\010\016" +
    "\011\021\012\006\013\013\017\010\020\056\022\046\023" +
    "\054\024\047\025\027\026\003\032\015\033\024\034\041" +
    "\036\034\040\023\042\051\043\031\044\057\045\005\047" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\170\027\100\035" +
    "\103\042\064\046\066\052\105\053\107\054\110\055\102" +
    "\001\001\000\026\006\164\027\100\035\103\041\163\042" +
    "\064\046\066\052\105\053\107\054\110\055\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\167\027\100\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\173\027\100\035\103\042\064\046\066\052\105\053" +
    "\107\054\110\055\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\201\027\100\035\103\042\064\046\066" +
    "\052\105\053\107\054\110\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\206\027\100\035\103\042\064\046\066\052" +
    "\105\053\107\054\110\055\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\211\027\100\035\103\042" +
    "\064\046\066\052\105\053\107\054\110\055\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\214\027" +
    "\100\035\103\042\064\046\066\052\105\053\107\054\110" +
    "\055\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\217\027\100\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\225\027\100\035\103\042\064\046" +
    "\066\052\105\053\107\054\110\055\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\231\001\001\000\024\006\236\027\100\035\103\042\064" +
    "\046\066\052\105\053\107\054\110\055\102\001\001\000" +
    "\002\001\001\000\024\006\234\027\100\035\103\042\064" +
    "\046\066\052\105\053\107\054\110\055\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\240\011\241\021\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\003\246\004\020\005\022\007\004\010" +
    "\016\011\021\012\006\013\013\017\010\020\056\022\046" +
    "\023\054\024\047\025\027\026\003\032\015\033\024\034" +
    "\041\036\034\040\023\042\051\043\031\044\057\045\005" +
    "\047\032\001\001\000\062\004\155\005\022\007\004\010" +
    "\016\011\021\012\006\013\013\017\010\020\056\022\046" +
    "\023\054\024\047\025\027\026\003\032\015\033\024\034" +
    "\041\036\034\040\023\042\051\043\031\044\057\045\005" +
    "\047\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\301\027\100\035" +
    "\103\042\064\046\066\052\105\053\107\054\110\055\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\304\004\020\005\022\007\004\010\016\011\021\012\006" +
    "\013\013\017\010\020\056\022\046\023\054\024\047\025" +
    "\027\026\003\032\015\033\024\034\041\036\034\040\023" +
    "\042\051\043\031\044\057\045\005\047\032\001\001\000" +
    "\062\004\155\005\022\007\004\010\016\011\021\012\006" +
    "\013\013\017\010\020\056\022\046\023\054\024\047\025" +
    "\027\026\003\032\015\033\024\034\041\036\034\040\023" +
    "\042\051\043\031\044\057\045\005\047\032\001\001\000" +
    "\002\001\001\000\004\012\307\001\001\000\002\001\001" +
    "\000\064\003\311\004\020\005\022\007\004\010\016\011" +
    "\021\012\006\013\013\017\010\020\056\022\046\023\054" +
    "\024\047\025\027\026\003\032\015\033\024\034\041\036" +
    "\034\040\023\042\051\043\031\044\057\045\005\047\032" +
    "\001\001\000\062\004\155\005\022\007\004\010\016\011" +
    "\021\012\006\013\013\017\010\020\056\022\046\023\054" +
    "\024\047\025\027\026\003\032\015\033\024\034\041\036" +
    "\034\040\023\042\051\043\031\044\057\045\005\047\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\164\027" +
    "\100\035\103\041\332\042\064\046\066\052\105\053\107" +
    "\054\110\055\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\340\027\100\035\103\042" +
    "\064\046\066\052\105\053\107\054\110\055\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\347\004\020\005\022\007\004\010\016\011\021\012" +
    "\006\013\013\017\010\020\056\022\046\023\054\024\047" +
    "\025\027\026\003\032\015\033\024\034\041\036\034\040" +
    "\023\042\051\043\031\044\057\045\005\047\032\001\001" +
    "\000\062\004\155\005\022\007\004\010\016\011\021\012" +
    "\006\013\013\017\010\020\056\022\046\023\054\024\047" +
    "\025\027\026\003\032\015\033\024\034\041\036\034\040" +
    "\023\042\051\043\031\044\057\045\005\047\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\353\027" +
    "\100\035\103\042\064\046\066\052\105\053\107\054\110" +
    "\055\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\376\027\100\035\103\042\064" +
    "\046\066\052\105\053\107\054\110\055\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\363\027\100\035\103\042\064\046\066\052\105\053" +
    "\107\054\110\055\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\370\027\100\035\103\042\064\046\066\052\105\053\107" +
    "\054\110\055\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\374\027\100\035\103" +
    "\042\064\046\066\052\105\053\107\054\110\055\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\u0104\027\100\035\103\042" +
    "\064\046\066\052\105\053\107\054\110\055\102\001\001" +
    "\000\024\006\u0102\027\100\035\103\042\064\046\066\052" +
    "\105\053\107\054\110\055\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\u0107\027\100\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\u010f\014\u010e" +
    "\015\u010c\016\u010b\027\100\035\103\042\064\046\066\052" +
    "\105\053\107\054\110\055\102\001\001\000\030\006\u010f" +
    "\014\u011c\015\u011b\027\100\035\103\042\064\046\066\052" +
    "\105\053\107\054\110\055\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\u0113\004\020" +
    "\005\022\007\004\010\016\011\021\012\006\013\013\017" +
    "\010\020\056\022\046\023\054\024\047\025\027\026\003" +
    "\032\015\033\024\034\041\036\034\040\023\042\051\043" +
    "\031\044\057\045\005\047\032\001\001\000\062\004\155" +
    "\005\022\007\004\010\016\011\021\012\006\013\013\017" +
    "\010\020\056\022\046\023\054\024\047\025\027\026\003" +
    "\032\015\033\024\034\041\036\034\040\023\042\051\043" +
    "\031\044\057\045\005\047\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\u0118\004" +
    "\020\005\022\007\004\010\016\011\021\012\006\013\013" +
    "\017\010\020\056\022\046\023\054\024\047\025\027\026" +
    "\003\032\015\033\024\034\041\036\034\040\023\042\051" +
    "\043\031\044\057\045\005\047\032\001\001\000\062\004" +
    "\155\005\022\007\004\010\016\011\021\012\006\013\013" +
    "\017\010\020\056\022\046\023\054\024\047\025\027\026" +
    "\003\032\015\033\024\034\041\036\034\040\023\042\051" +
    "\043\031\044\057\045\005\047\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\u0126\027" +
    "\100\035\103\042\064\046\066\052\105\053\107\054\110" +
    "\055\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u012d\001\001" +
    "\000\030\006\u0133\027\100\030\u0130\031\u0132\035\103\042" +
    "\064\046\066\052\105\053\107\054\110\055\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\u0133\027\100" +
    "\030\u0134\031\u0132\035\103\042\064\046\066\052\105\053" +
    "\107\054\110\055\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\u0138\027\100\031\u0137\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u013f\001\001\000\030\006\u0133\027" +
    "\100\030\u0142\031\u0132\035\103\042\064\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0148\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\u0152\027\100\035\103" +
    "\042\064\045\u014e\046\066\052\105\053\107\054\110\055" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u0155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u015c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\u0162\027\100\035\103\042\064\045\u0160\046\066\052\105" +
    "\053\107\054\110\055\102\001\001\000\002\001\001\000" +
    "\004\051\u0163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u016a\037\u0169\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0171\001\001\000\002\001\001\000\064\003\u016f\004\020" +
    "\005\022\007\004\010\016\011\021\012\006\013\013\017" +
    "\010\020\056\022\046\023\054\024\047\025\027\026\003" +
    "\032\015\033\024\034\041\036\034\040\023\042\051\043" +
    "\031\044\057\045\005\047\032\001\001\000\062\004\155" +
    "\005\022\007\004\010\016\011\021\012\006\013\013\017" +
    "\010\020\056\022\046\023\054\024\047\025\027\026\003" +
    "\032\015\033\024\034\041\036\034\040\023\042\051\043" +
    "\031\044\057\045\005\047\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\u0174\004" +
    "\020\005\022\007\004\010\016\011\021\012\006\013\013" +
    "\017\010\020\056\022\046\023\054\024\047\025\027\026" +
    "\003\032\015\033\024\034\041\036\034\040\023\042\051" +
    "\043\031\044\057\045\005\047\032\001\001\000\062\004" +
    "\155\005\022\007\004\010\016\011\021\012\006\013\013" +
    "\017\010\020\056\022\046\023\054\024\047\025\027\026" +
    "\003\032\015\033\024\034\041\036\034\040\023\042\051" +
    "\043\031\044\057\045\005\047\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0178\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\u017c\027\100\035\103\042\064\046\066\052\105\053\107" +
    "\054\110\055\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u0183" +
    "\001\001\000\030\006\u0133\027\100\030\u0186\031\u0132\035" +
    "\103\042\064\046\066\052\105\053\107\054\110\055\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u018d\001" +
    "\001\000\030\006\u0133\027\100\030\u0190\031\u0132\035\103" +
    "\042\064\046\066\052\105\053\107\054\110\055\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRECION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACIONV 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACIONV 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ACTUALIZACIONV 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IF_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= MATCH_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FOR_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= WHILE_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= DOWHILE_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= BREAK_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CONINUE_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= ASIG_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIG_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= APPEND_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= METODOS_FUNCIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= START_FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= LLAMADA PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= STRUCTS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= INSTANCIACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= ASIGNACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= RETURN_INS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= error PUNTOYCOMA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMPRECION ::= PRINTR PARENTESIS1 EXPRESION PARENTESIS2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRECION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, operadoresAritmeticos.NEGACION,  aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a,b, operadoresAritmeticos.SUMA,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a,b, operadoresAritmeticos.RESTA,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a,b ,operadoresAritmeticos.MULTIPLICACION,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION DIVIDIDO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, operadoresAritmeticos.DIVISION,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, operadoresAritmeticos.MODULO,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION POR POR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, operadoresAritmeticos.POTENCIA,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= PARENTESIS1 TIPO PARENTESIS2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteo(a, b, aleft,aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION NOT IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MENOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MAYOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicas( a, b, OperadoresLogicos.XOR, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVariable(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(0), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= VERDADERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(tipoDato.BOOL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= FALSO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(tipoDato.BOOL), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= PARENTESIS1 EXPRESION PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= ACCESO_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ACCESO_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= REMOVE_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= ROUND_EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= LENGTH_EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= TOSTRING_EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= FIND_EXP 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= INTT 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= DOUBLET 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= STRINGT 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= CHART 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= BOOLT 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= VOID 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACIONV ::= VARR IDENTIFICADOR DOSPUNTOS TIPO IGUAL EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVariable(a, b, c,true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACIONV ::= VARR IDENTIFICADOR DOSPUNTOS TIPO PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVariable(a, b, true,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACIONV ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO IGUAL EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVariable(a, b, c,false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACIONV ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVariable(a, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACIONV ::= IDENTIFICADOR IGUAL EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVariable(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONV",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACTUALIZACIONV ::= IDENTIFICADOR MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACIONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ACTUALIZACIONV ::= IDENTIFICADOR MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACIONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACTUALIZACIONV ::= IDENTIFICADOR MAS MAS PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACIONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ACTUALIZACIONV ::= IDENTIFICADOR MENOS MENOS PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACIONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF_P ::= IFR PARENTESIS1 EXPRESION PARENTESIS2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF_P ::= IFR PARENTESIS1 EXPRESION PARENTESIS2 LLAVE1 INSTRUCCIONES LLAVE2 ELSER LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF_P ::= IFR PARENTESIS1 EXPRESION PARENTESIS2 LLAVE1 INSTRUCCIONES LLAVE2 ELSER IF_P 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_P",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MATCH_P ::= MATCH EXPRESION LLAVE1 CASOS CASO_DEFECTO LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_P",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MATCH_P ::= MATCH EXPRESION LLAVE1 CASOS LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_P",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MATCH_P ::= MATCH EXPRESION LLAVE1 CASO_DEFECTO LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_P",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASOS ::= CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASO ::= EXPRESION IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASO_DEFECTO ::= GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR_P ::= FORR PARENTESIS1 ASIGNACIONV EXPRESION PUNTOYCOMA ACT PARENTESIS2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_P",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACT ::= ACTUALIZACIONV 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACT ::= ASIGNACIONV 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WHILE_P ::= WHILER PARENTESIS1 EXPRESION PARENTESIS2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_P",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DOWHILE_P ::= DOR LLAVE1 INSTRUCCIONES LLAVE2 WHILER PARENTESIS1 EXPRESION PARENTESIS2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b,a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE_P",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BREAK_P ::= BREAKR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK_P",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONINUE_P ::= CONTINUER PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONINUE_P",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION_VECTOR ::= VARR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(a, 1, c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION_VECTOR ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(a, 1, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION_VECTOR ::= VARR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(a, 2,  c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION_VECTOR ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_VALORES CORCHETE2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(a,2, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_VECTOR ::= VARR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 IGUAL IDENTIFICADOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,1, c, true, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_VECTOR ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 IGUAL IDENTIFICADOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,1, c, false, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_VECTOR ::= VARR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL IDENTIFICADOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,2, c, true, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION_VECTOR ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL IDENTIFICADOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,2, c, false, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION_VECTOR ::= VARR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 IGUAL ACCESO_VECTOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,1, c, true, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION_VECTOR ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 IGUAL ACCESO_VECTOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,1, c, false, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION_VECTOR ::= VARR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL ACCESO_VECTOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,2, c, true, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION_VECTOR ::= CONSTR IDENTIFICADOR DOSPUNTOS TIPO CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL ACCESO_VECTOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVector(a,2, c, false, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTA_VALORES ::= LISTA_VALORES COMA EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTA_VALORES ::= LISTA_VALORES COMA LISTA_VALORES2 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTA_VALORES ::= LISTA_VALORES2 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LISTA_VALORES ::= EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTA_VALORES2 ::= CORCHETE1 LISTA_VALORES CORCHETE2 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ACCESO_VECTOR ::= IDENTIFICADOR CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_VECTOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ACCESO_VECTOR ::= IDENTIFICADOR CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_VECTOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ASIG_VECTOR ::= IDENTIFICADOR CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VECTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIG_VECTOR ::= IDENTIFICADOR CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VECTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ASIG_LISTA ::= LIST MENOR TIPO MAYOR IDENTIFICADOR IGUAL NEW LIST PARENTESIS1 PARENTESIS2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		RESULT = new DeclaracionLista(b, a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_LISTA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ASIG_LISTA ::= LIST MENOR TIPO MAYOR IDENTIFICADOR IGUAL IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DeclaracionLista(b, c, a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_LISTA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // APPEND_LIST ::= IDENTIFICADOR PUNTO APPEND PARENTESIS1 EXPRESION PARENTESIS2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Append(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPEND_LIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // REMOVE_LIST ::= IDENTIFICADOR PUNTO REMOVE PARENTESIS1 EXPRESION PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Remove(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVE_LIST",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // METODOS_FUNCIONES ::= TIPO IDENTIFICADOR PARENTESIS1 PARAMS PARENTESIS2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Funcion(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS_FUNCIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // METODOS_FUNCIONES ::= TIPO IDENTIFICADOR PARENTESIS1 PARENTESIS2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Funcion(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS_FUNCIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMS ::= PARAMS COMA TIPO IDENTIFICADOR 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMS ::= TIPO IDENTIFICADOR 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // START_FUNCION ::= START IDENTIFICADOR PARENTESIS1 PARAMSCALL PARENTESIS2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Start(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START_FUNCION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // START_FUNCION ::= START IDENTIFICADOR PARENTESIS1 PARENTESIS2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new Start(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START_FUNCION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LLAMADA ::= IDENTIFICADOR PARENTESIS1 PARAMSCALL PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LLAMADA ::= IDENTIFICADOR PARENTESIS1 PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // RETURN_INS ::= RETURN EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN_INS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // RETURN_INS ::= RETURN PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN_INS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // STRUCTS ::= STRUCT LLAVE1 STRUCTS_LIST LLAVE2 IDENTIFICADOR PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Struct(a,b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // STRUCTS_LIST ::= STRUCTS_LIST IDENTIFICADOR DOSPUNTOS TIPO PUNTOYCOMA 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; a.put(b, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTS_LIST",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // STRUCTS_LIST ::= STRUCTS_LIST IDENTIFICADOR DOSPUNTOS IDENTIFICADOR PUNTOYCOMA 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; a.put(b, c );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTS_LIST",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // STRUCTS_LIST ::= IDENTIFICADOR DOSPUNTOS IDENTIFICADOR PUNTOYCOMA 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new HashMap<String, Object>(); RESULT.put(b, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTS_LIST",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // STRUCTS_LIST ::= IDENTIFICADOR DOSPUNTOS TIPO PUNTOYCOMA 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new HashMap<String, Object>(); RESULT.put(b, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTS_LIST",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INSTANCIACION_STRUCT ::= VARR IDENTIFICADOR DOSPUNTOS IDENTIFICADOR IGUAL LLAVE1 VALORES_STRUCT LLAVE2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Object> c = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Instanciacion(true, a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_STRUCT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INSTANCIACION_STRUCT ::= CONSTR IDENTIFICADOR DOSPUNTOS IDENTIFICADOR IGUAL LLAVE1 VALORES_STRUCT LLAVE2 PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Object> c = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Instanciacion(false, a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_STRUCT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALORES_STRUCT ::= VALORES_STRUCT COMA IDENTIFICADOR DOSPUNTOS EXPRESION 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; a.put(b, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VALORES_STRUCT ::= VALORES_STRUCT COMA IDENTIFICADOR DOSPUNTOS INSTANCIACION_STRUCT 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; a.put(b, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VALORES_STRUCT ::= VALORES_STRUCT COMA IDENTIFICADOR DOSPUNTOS LLAVE1 VALORES_STRUCT LLAVE2 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Object> c = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; a.put(b, c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VALORES_STRUCT ::= IDENTIFICADOR DOSPUNTOS LLAVE1 VALORES_STRUCT LLAVE2 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Object> c = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new HashMap<String, Object>(); RESULT.put(b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VALORES_STRUCT ::= IDENTIFICADOR DOSPUNTOS INSTANCIACION_STRUCT 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new HashMap<String, Object>(); RESULT.put(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VALORES_STRUCT ::= IDENTIFICADOR DOSPUNTOS EXPRESION 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new HashMap<String, Object>(); RESULT.put(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ACCESO_STRUCT ::= IDENTIFICADOR PUNTO IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AccesoStruct(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ACCESO_STRUCT ::= IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AccesoStruct(a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ASIGNACION_STRUCT ::= IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion(a, b, c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ASIGNACION_STRUCT ::= IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO IDENTIFICADOR IGUAL EXPRESION PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Asignacion(a, b, c, d, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ROUND_EXP ::= ROUND PARENTESIS1 EXPRESION PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Round(a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROUND_EXP",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LENGTH_EXP ::= LENGTH PARENTESIS1 EXPRESION PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Length(a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LENGTH_EXP",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TOSTRING_EXP ::= TOSTRING PARENTESIS1 EXPRESION PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ToString(a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOSTRING_EXP",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FIND_EXP ::= IDENTIFICADOR PUNTO FIND PARENTESIS1 EXPRESION PARENTESIS2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Find(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND_EXP",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
